{"version":3,"sources":["components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","valueType","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","InputElement","Invalid","validationError","join","onChange","options","option","displayValue","Label","label"],"mappings":"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","file":"static/js/4.72b6982e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__20738dc3bf8769d4b8573180407c181c-base64-5]\",\"Label\":\"Input__Label__65140db53e7a685287fce18b56e05f3f-base64-5]\",\"InputElement\":\"Input__InputElement__36ff35c87367ebbd5eb8fd1b4d982abe-base64-5]\",\"Invalid\":\"Input__Invalid__60e64a1f7d8757c206f971c04716545c-base64-5]\",\"validationError\":\"Input__validationError__d6c1ee0eeea81b828c5ae3a1cf95fa0e-base64-5]\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__cc4b29de1ab8063879e002f35fb0e1bc-base64-5]\"};","import React , { Component} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport classes from \"./Auth.css\";\nimport * as actions from \"../../Store/Actions/index\";\nimport { updateObject,checkValidity } from \"../../Shared/Utility\";\n\nclass Auth extends Component{\n    state = {\n        controls:{\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'Mail Address'\n                },\n                value: '',\n                validation:{\n                    required:true,\n                    isEmail:true\n                },\n                valid:false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'Password'\n                },\n                value: '',\n                validation:{\n                    required:true,\n                    minLength:6\n                },\n                valid:false,\n                touched:false\n            }\n        },\n        isSignup:true\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath !=='/'){\n            this.props.onSetAuthRedirectPath();\n        }\n\n    }\n\n    \n    inputChangedHandler = (event, controlName) =>{\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]:updateObject(this.state.controls[controlName],{\n                value:event.target.value,\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            })\n        })\n        this.setState({controls:updatedControls});\n    }\n\n    submitHandler = (event) =>{\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    switchAuthModeHandler = () =>{\n        this.setState(prevState => {\n            return{isSignup: !prevState.isSignup}\n        });\n    }\n\n    render(){\n        const formElementArray =[];\n        for(let key in this.state.controls){\n            formElementArray.push({\n                id: key,\n                config:this.state.controls[key]\n            });\n        }\n\n        let form = formElementArray.map(formElement =>(\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig} \n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                touched={formElement.config.touched}\n                shouldValidate={formElement.config.validation}\n                valueType={formElement.id}\n                changed={(event) => this.inputChangedHandler(event,formElement.id)}\n            />\n            \n        ));\n\n        if(this.props.loading){\n            form = <Spinner />\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage=(\n                <p>{this.props.error.message}</p>\n            );\n        }\n\n        let authRedirect= null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to ={this.props.authRedirectPath} />\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\n            </div>\n        )\n        \n    }\n}\n\nconst mapStateToProps = state =>{\n    return{\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger:state.burgerBuilder.building,\n        authRedirectPath:state.auth.authRedirectPath\n    }\n};\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onAuth: (email,password, isSignup) =>dispatch(actions.auth(email,password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.css';\n\nconst Input =(props) =>{\n\n    let inputElement= null;\n    const inputClasses =[classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    let validationError= null;  \n    if(props.invalid && props.touched){\n        validationError =<p className={classes.validationError}>Please Enter A Valid {props.valueType} !</p>\n    }\n\n    switch(props.elementType){\n        case ('input'):\n            inputElement =\n            <input \n                className={inputClasses.join(' ')}\n                { ...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}\n            />;\n        break;\n        case ('textarea'):\n            inputElement =\n            <textarea \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n        break;\n        case ('select'):\n            inputElement =(\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                        onChange={props.changed}>\n                    {props.elementConfig.options.map(option =>(\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n               \n            \n            );\n        break;\n        default:\n                inputElement = \n                <input className=\n                {inputClasses.join(' ')} \n                {...props.elementConfig}\n                 value={props.value}\n                 onChange={props.changed} />    \n    }\n    return(\n    <div className={classes.Input}>\n        <label className={classes.Label}>{props.label}</label>\n        {inputElement}\n        {validationError}\n    </div>\n\n    );}\n\nexport default Input;                                                                         "],"sourceRoot":""}