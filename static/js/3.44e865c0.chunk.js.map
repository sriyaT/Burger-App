{"version":3,"sources":["components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","CheckoutSummary","props","className","classes","style","width","margiin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","isFormValid","orderHandler","event","preventDefault","setState","loading","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","formIsValid","formElementArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","valueType","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","InputElement","Invalid","validationError","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.44e865c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__20738dc3bf8769d4b8573180407c181c-base64-5]\",\"Label\":\"Input__Label__65140db53e7a685287fce18b56e05f3f-base64-5]\",\"InputElement\":\"Input__InputElement__36ff35c87367ebbd5eb8fd1b4d982abe-base64-5]\",\"Invalid\":\"Input__Invalid__60e64a1f7d8757c206f971c04716545c-base64-5]\",\"validationError\":\"Input__validationError__d6c1ee0eeea81b828c5ae3a1cf95fa0e-base64-5]\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__44594a116b7286e6bf261a1513619561-base64-5]\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__bda5a0149c2349ea856321d7d516206d-base64-5]\",\"ContacData\":\"ContactData__ContacData__d8733b0e0c92d60537f0f3235af64037-base64-5]\"};","import React from 'react';\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nimport classes from \"./CheckoutSummary.css\";\n\nconst CheckoutSummary =(props)=>{\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width:'100%',margiin:'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button \n            btnType=\"Danger\"\n            clicked={props.checkoutCancelled}>CANCEL\n            </Button>\n            <Button \n            btnType=\"Success\" \n            clicked={props.checkoutContinued}>CONTINUE\n            </Button>\n        </div>\n    );\n\n}\nexport default CheckoutSummary;\n","import React, { Component } from 'react';\nimport Button from \"../../../components/UI/Button/Button\";\nimport classes from \"./ContactData.css\";\nimport axios from \"../../../axios-orders\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from '../../../components/UI/Input/Input';\nimport {connect} from 'react-redux';\nimport withErrorHandler from \"../../../hoc/WithErrorHandler/WithErrorHandler\";\nimport * as actions from \"../../../Store/Actions/index\";\nimport { updateObject,checkValidity } from \"../../../Shared/Utility\";\n\nclass ContactData extends Component{\n    state={\n        orderForm:{\n            name:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Your Name'\n                },\n            value: '',\n            validation:{\n                required:true\n            },\n            valid:false,\n            touched:false\n            },\n            \n\n            street:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Street'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            zipcode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'ZIP Code'\n                },\n                value: '',\n                validation:{\n                    required:true,\n                    minLength:5,\n                    maxLength:5\n                },\n                valid:false,\n                touched:false\n            },\n            country:{\n                elementType:'input',\n                elementConfig:{\n                    type:'text',\n                    placeholder:'Country'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:' Your E-Mail'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false,\n                touched:false\n            },\n            deliveryMethod:{\n                elementType:'select',\n                elementConfig:{\n                    options:[\n                        {value:'fastest', displayValue:'Fastest'},\n                        {value:'cheapest', displayValue:'Cheapest'}\n                    ]\n            },\n            value: 'fastest',\n            validation:{},\n            valid:true\n        },\n    },\n    isFormValid:false\n}\n\n    orderHandler=(event) =>{\n        event.preventDefault();\n          this.setState({loading:true});\n         const formData = {};\n         for( let formElementIdentifier in this.state.orderForm){\n             formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n             \n         }\n        const order ={\n            ingredients:this.props.ings,\n            price:this.props.price,\n            orderData:formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderBurger(order, this.props.token);\n    }\n\n    inputChangedHandler = (event , inputIdentifier) => {\n            const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier],{\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation), \n                touched: true\n            });\n            const updatedOrderForm= updateObject(this.state.orderForm,{\n                [inputIdentifier]:updatedFormElement\n            });\n            let formIsValid=true;\n            for(let inputIdentifier in updatedOrderForm){\n                formIsValid= updatedOrderForm[inputIdentifier].valid && formIsValid;\n            }\n\n            this.setState( {orderForm: updatedOrderForm, formIsValid:formIsValid}); \n    }\n    valueType\n    render(){\n        const formElementArray =[];\n        for(let key in this.state.orderForm){\n            formElementArray.push({\n                id: key,\n                config:this.state.orderForm[key]\n            });\n        }\n        let form= (\n            <form onSubmit={this.orderHandler}>\n                {formElementArray.map(formElement =>(\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig} \n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        touched={formElement.config.touched}\n                        shouldValidate={formElement.config.validation}\n                         valueType={formElement.id}\n                        changed={ (event) => this.inputChangedHandler(event,formElement.id)}\n                    />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if(this.state.loading){\n            form =<Spinner />;\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Data </h4>\n                {form}\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps =state =>{\n    return{\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        loading:state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n    }\n}\nconst mapDispatchToProps = dispatch  => { \n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n    \n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React,{ Component } from 'react';\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport {Route, Redirect}  from \"react-router-dom\";\nimport ContactData from \"../Checkout/ContactData/ContactData\";\nimport { connect } from \"react-redux\";\n\n\n\n\nclass Checkout extends Component{\n   \n   \n    checkoutCancelledHandler=()=>{\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler=()=>{\n        this.props.history.replace('/checkout/contact-data');\n    \n    }\n     \n    render(){\n         let summary = <Redirect to =\"/\" /> \n        \n         if(this.props.ings){\n            const purchasedRedirect = this.props.purchased ? <Redirect to = \"/\" /> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                        ingredients={this.props.ings}\n                        checkoutCancelled={this.checkoutCancelledHandler}\n                        checkoutContinued={this.checkoutContinuedHandler}/>\n                    <Route \n                        path={this.props.match.path + '/contact-Data'} \n                        component= {ContactData}/>\n                </div>\n                \n            );\n         } \n        return summary;\n    }\n}\n\nconst mapStateToProps = state =>{\n    return{\n        ings:state.burgerBuilder.ingredients,\n        purchased:state.order.purchased\n    }\n}\n\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport classes from './Input.css';\n\nconst Input =(props) =>{\n\n    let inputElement= null;\n    const inputClasses =[classes.InputElement];\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid);\n    }\n\n    let validationError= null;  \n    if(props.invalid && props.touched){\n        validationError =<p className={classes.validationError}>Please Enter A Valid {props.valueType} !</p>\n    }\n\n    switch(props.elementType){\n        case ('input'):\n            inputElement =\n            <input \n                className={inputClasses.join(' ')}\n                { ...props.elementConfig} \n                value={props.value} \n                onChange={props.changed}\n            />;\n        break;\n        case ('textarea'):\n            inputElement =\n            <textarea \n                className={inputClasses.join(' ')}\n                {...props.elementConfig} \n                value={props.value}\n                onChange={props.changed} />;\n        break;\n        case ('select'):\n            inputElement =(\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                        onChange={props.changed}>\n                    {props.elementConfig.options.map(option =>(\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n               \n            \n            );\n        break;\n        default:\n                inputElement = \n                <input className=\n                {inputClasses.join(' ')} \n                {...props.elementConfig}\n                 value={props.value}\n                 onChange={props.changed} />    \n    }\n    return(\n    <div className={classes.Input}>\n        <label className={classes.Label}>{props.label}</label>\n        {inputElement}\n        {validationError}\n    </div>\n\n    );}\n\nexport default Input;                                                                         "],"sourceRoot":""}